{
  "hash": "e6e7ae1d7c51dcf42b2b5136fc13996f",
  "result": {
    "markdown": "---\ntitle: \"How to create a normal distribution plot using Python and Quarto\"\nauthor: \"matthias berger\"\ndate-modified: \"2023-02-10\"\ncategories: [howto, python]\n---\n\n\nOk, now that I like my setup more and more, and that I have also included `Julia`, I also want to use `Python`. (I think that I implicitly use jupyter here, as I now use `code` with the quarto-extension, but to be honest, I am not sure ðŸ™ˆ)\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.stats import norm\n  \nx_axis = np.arange(-3, 3, 0.01)\n\nplt.plot(x_axis, norm.pdf(x_axis, 0, 1))\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n## Layout\n\n~~I noted that the plot is bigger than the width of the blog.~~ (This effect was gone later...) So I search for some possibilities to adjust and [here](https://quarto.org/docs/authoring/figures.html#computations \"https://quarto.org/docs/authoring/figures.html#computations\") is a good starting point.\n\nHere I use the hash-pipe to set the layout, with one picture of width 100:\n\n``` {{python}}\n#| layout: [[100]]\nplt.plot(x_axis, norm.pdf(x_axis, 0, 1))\nplt.show()\n```\n\n\n::: {.cell layout=\"[100]\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-3.png){width=672}\n:::\n:::\n\n\nThe outer squared brackets indicate the whole layout, where the inner squared brackets are the first row, that is here filled 100% with one plot.\n\nIt is also possible to set more than one figure:\n\n``` {{python}}\n#| layout: [[50, 50]]\nplt.plot(x_axis, norm.pdf(x_axis, 0, 1))\nplt.show()\n\nplt.plot(x_axis, norm.pdf(x_axis, 1, 2))\nplt.show()\n```\n\n\n::: {.cell layout=\"[[50,50]]\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-6.png){width=672}\n:::\n:::\n\n\nHere is some example code from the [quartos docs](https://github.com/quarto-dev/quarto-web/blob/main/docs/authoring/figures.qmd#L392 \"https://github.com/quarto-dev/quarto-web/blob/main/docs/authoring/figures.qmd#L392\"), that I quite like. But in the quarto docs they use fixed image-files to simulate the output, where I use a duplicated codeblock, once with a header\n\n    ``` {{python}}\n\nand once as a normal codeblock with `#| echo: false` to suppress the output of the code, but to generate the figure.\n\nThis example code generates a tabset to compare `python` and `R`, I guess I will use this a lot in the future.\n\n::: panel-tabset\n#### Jupyter\n\n``` {{python}}\n#| layout-ncol: 2\n#| fig-cap: \n#|   - \"Line Plot 1\"\n#|   - \"Line Plot 2\"\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\nplt.plot([8,65,23,90])\nplt.show()\n```\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![Line Plot 1](index_files/figure-html/unnamed-chunk-4-9.png){width=672}\n:::\n\n::: {.cell-output-display}\n![Line Plot 2](index_files/figure-html/unnamed-chunk-4-10.png){width=672}\n:::\n:::\n\n\n#### Knitr\n\n``` {{r}}\n#| layout-ncol: 2\n#| fig-cap: \n#|   - \"Speed and Stopping Distances of Cars\"\n#|   - \"Vapor Pressure of Mercury as a Function of Temperature\"\nplot(cars)\nplot(pressure)\n```\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![Speed and Stopping Distances of Cars](index_files/figure-html/unnamed-chunk-5-13.png){width=672}\n:::\n\n::: {.cell-output-display}\n![Vapor Pressure of Mercury as a Function of Temperature](index_files/figure-html/unnamed-chunk-5-14.png){width=672}\n:::\n:::\n\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}